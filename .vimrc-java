call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'knsh14/vim-github-link'
Plug 'preservim/nerdtree'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'morhetz/gruvbox'
Plug 'bogado/file-line'
Plug 'godlygeek/tabular'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Chiel92/vim-autoformat'
call plug#end()
syntax on
set relativenumber
set nu
set hlsearch
set nowrap
set noswapfile
set smartcase
set nobackup
set nowritebackup
set undodir=~/.vim/undo-dir
set undofile
set incsearch
set scrolloff=999
set backspace=indent,eol,start  " more powerful backspacing
set wildmode=longest,list,full
set wildmenu
set cmdheight=2
set updatetime=300
set smarttab
filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

let mapleader = " "

set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey

cabbr <expr> %% expand('%:p:h')

map <C-n> :NERDTreeToggle<CR>
map <leader>f :NERDTreeFind<CR>

colorscheme gruvbox
set background=dark
let g:gruvbox_contrast_dark="hard"

" Git status
nmap <leader>gs :G<CR>
nmap <leader>ee g_F{a<CR><ESC>O

nnoremap <leader>cs :let<SPACE>@/=""<CR>
" In insert or command mode, move normally by using Ctrl
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>

" Copy github link to system clipboard
nnoremap <leader>cg :GetCurrentBranchLink<CR>

" Mappings for opening and closing quotes and brackets
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap (<CR> (<CR>)<ESC>O
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

autocmd BufWritePre * :call TrimWhitespace()

au BufNewFile,BufRead Jenkinsfile* setf groovy

let g:airline_theme='bubblegum'

" Fzf configurations
nmap <C-p> :GF<CR>

" Copy Matches
function! CopyMatches()
  let hits = []
  %s//\=len(add(hits, submatch(0))) ? submatch(0) : ''/gne
  let reg = 'm'
  execute 'let @'.reg.' = join(hits, "
") . "
"'
endfunction

nmap <leader>cm :call CopyMatches()<CR>

" Go to file between parentheses
nmap <leader>gp g_F(yi(:e<SPACE><C-R>"<CR>

" Go to file between double quotes
nmap <leader>g" g_F"yi":e<SPACE><C-R>"<CR>

" Go to file between single quotes
nmap <leader>g' g_F'yi':e<SPACE><C-R>"<CR>
autocmd FileType java setlocal omnifunc=javacomplete#Complete

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Coc Configurations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>jd <Plug>(coc-definition)
nmap <leader>jt <Plug>(coc-type-definition)
nmap <leader>jm <Plug>(coc-implementation)
nmap <leader>jr <Plug>(coc-references)
nmap <leader>jn <Plug>(coc-rename)
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" End Coc Configurations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent><nowait> <leader>oi :call CocAction('runCommand', 'editor.action.organizeImport')<CR>
